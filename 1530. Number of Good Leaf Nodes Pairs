class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode(int val) { this.val = val; }
}

public class Solution {
    public int countPairs(TreeNode root, int distance) {
        int[] count = new int[1];
        dfs(root, distance, count);
        return count[0];
    }

    private int[] dfs(TreeNode node, int distance, int[] count) {
        if (node == null) return new int[distance + 1];
        
        // If it's a leaf node
        if (node.left == null && node.right == null) {
            int[] leafDistances = new int[distance + 1];
            leafDistances[1] = 1; // Distance 1 because we start counting from the leaf
            return leafDistances;
        }

        int[] leftDistances = dfs(node.left, distance, count);
        int[] rightDistances = dfs(node.right, distance, count);

        // Count pairs
        for (int i = 1; i <= distance; i++) {
            for (int j = 1; j <= distance - i; j++) {
                count[0] += leftDistances[i] * rightDistances[j];
            }
        }

        // Merge the distances for the parent
        int[] currentDistances = new int[distance + 1];
        for (int i = 1; i < distance; i++) {
            currentDistances[i + 1] = leftDistances[i] + rightDistances[i];
        }

        return currentDistances;
    }
}
