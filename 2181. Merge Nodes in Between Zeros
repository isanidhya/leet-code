class ListNode {
    int val;
    ListNode next;
    ListNode() {}
    ListNode(int val) { this.val = val; }
    ListNode(int val, ListNode next) { this.val = val; this.next = next; }

    // Method to deserialize a string to a ListNode
    public static ListNode deserialize(String data) {
        if (data == null || data.equals("[]")) return null;
        String[] nodes = data.substring(1, data.length() - 1).split(",");
        ListNode dummy = new ListNode(0);
        ListNode current = dummy;
        for (String node : nodes) {
            current.next = new ListNode(Integer.parseInt(node.trim()));
            current = current.next;
        }
        return dummy.next;
    }

    // Method to serialize a ListNode to a string
    public static String serialize(ListNode node) {
        if (node == null) return "[]";
        StringBuilder sb = new StringBuilder();
        sb.append("[");
        while (node != null) {
            sb.append(node.val);
            if (node.next != null) sb.append(",");
            node = node.next;
        }
        sb.append("]");
        return sb.toString();
    }
}

public class Solution {
    public ListNode mergeNodes(ListNode head) {
        ListNode dummy = new ListNode(0);
        ListNode current = dummy;
        ListNode iter = head.next; // Skip the initial zero
        int sum = 0;

        while (iter != null) {
            if (iter.val != 0) {
                sum += iter.val; // Add value to sum if not zero
            } else {
                // When zero is encountered, create a new node with the sum
                current.next = new ListNode(sum);
                current = current.next; // Move to the next node
                sum = 0; // Reset sum for next segment
            }
            iter = iter.next; // Move to the next node
        }
        
        return dummy.next; // Return the new list, skipping the dummy node
    }
}
