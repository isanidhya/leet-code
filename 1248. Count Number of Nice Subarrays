import java.util.HashMap;
import java.util.Map;

public class Solution {
    public int numberOfSubarrays(int[] nums, int k) {
        Map<Integer, Integer> prefixCount = new HashMap<>();
        prefixCount.put(0, 1); // Base case: there's one way to have a sum of 0 (by having no elements).
        
        int count = 0, prefixSum = 0;
        
        for (int num : nums) {
            // Update the prefix sum.
            if (num % 2 != 0) {
                prefixSum += 1;
            }
            
            // If there's a previous prefixSum that matches current prefixSum - k, we found a valid subarray.
            if (prefixCount.containsKey(prefixSum - k)) {
                count += prefixCount.get(prefixSum - k);
            }
            
            // Add the current prefixSum to the map.
            prefixCount.put(prefixSum, prefixCount.getOrDefault(prefixSum, 0) + 1);
        }
        
        return count;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        
        // Test case 1
        int[] nums1 = {1, 1, 2, 1, 1};
        int k1 = 3;
        System.out.println(solution.numberOfSubarrays(nums1, k1)); // Output: 2
        
        // Test case 2
        int[] nums2 = {2, 4, 6};
        int k2 = 1;
        System.out.println(solution.numberOfSubarrays(nums2, k2)); // Output: 0
        
        // Test case 3
        int[] nums3 = {2, 2, 2, 1, 2, 2, 1, 2, 2, 2};
        int k3 = 2;
        System.out.println(solution.numberOfSubarrays(nums3, k3)); // Output: 16
    }
}
