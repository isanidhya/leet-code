class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    
    TreeNode(int val) {
        this.val = val;
    }
}

public class Solution {
    public String getDirections(TreeNode root, int startValue, int destValue) {
        StringBuilder pathToStart = new StringBuilder();
        StringBuilder pathToDest = new StringBuilder();
        
        // Find paths from root to startValue and destValue
        findPath(root, startValue, pathToStart);
        findPath(root, destValue, pathToDest);
        
        int i = 0;
        int commonLength = Math.min(pathToStart.length(), pathToDest.length());
        
        // Find the first different node
        while (i < commonLength && pathToStart.charAt(i) == pathToDest.charAt(i)) {
            i++;
        }
        
        // Steps to move up from startValue to the common ancestor
        StringBuilder result = new StringBuilder();
        for (int j = i; j < pathToStart.length(); j++) {
            result.append('U');
        }
        
        // Steps to move down from the common ancestor to destValue
        for (int j = i; j < pathToDest.length(); j++) {
            result.append(pathToDest.charAt(j));
        }
        
        return result.toString();
    }
    
    // Helper function to find the path from root to the given value
    private boolean findPath(TreeNode root, int value, StringBuilder path) {
        if (root == null) {
            return false;
        }
        
        if (root.val == value) {
            return true;
        }
        
        path.append('L');
        if (findPath(root.left, value, path)) {
            return true;
        }
        path.deleteCharAt(path.length() - 1);
        
        path.append('R');
        if (findPath(root.right, value, path)) {
            return true;
        }
        path.deleteCharAt(path.length() - 1);
        
        return false;
    }
}
