public class Solution {
    public int maximumGain(String s, int x, int y) {
        if (x < y) {
            return maximumGainHelper(s, y, x, 'b', 'a');
        } else {
            return maximumGainHelper(s, x, y, 'a', 'b');
        }
    }

    private int maximumGainHelper(String s, int first, int second, char firstChar, char secondChar) {
        int score = 0;
        Deque<Character> stack = new ArrayDeque<>();

        // First pass: remove the higher priority substring
        for (char c : s.toCharArray()) {
            if (!stack.isEmpty() && stack.peek() == firstChar && c == secondChar) {
                stack.pop();
                score += first;
            } else {
                stack.push(c);
            }
        }

        // Collect the remaining characters after first pass
        StringBuilder remaining = new StringBuilder();
        while (!stack.isEmpty()) {
            remaining.append(stack.removeLast());
        }

        // Second pass: remove the lower priority substring
        for (char c : remaining.toString().toCharArray()) {
            if (!stack.isEmpty() && stack.peek() == secondChar && c == firstChar) {
                stack.pop();
                score += second;
            } else {
                stack.push(c);
            }
        }

        return score;
    }
}
