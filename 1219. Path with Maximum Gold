public class Solution {
    public int getMaximumGold(int[][] grid) {
        int maxGold = 0;
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (grid[i][j] != 0) {
                    maxGold = Math.max(maxGold, dfs(grid, i, j));
                }
            }
        }
        return maxGold;
    }
    
    private int dfs(int[][] grid, int i, int j) {
        if (i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || grid[i][j] == 0) {
            return 0;
        }
        
        int temp = grid[i][j];
        grid[i][j] = 0;
        
        int maxGold = 0;
        maxGold = Math.max(maxGold, temp + dfs(grid, i + 1, j));
        maxGold = Math.max(maxGold, temp + dfs(grid, i - 1, j));
        maxGold = Math.max(maxGold, temp + dfs(grid, i, j + 1));
        maxGold = Math.max(maxGold, temp + dfs(grid, i, j - 1));
        
        grid[i][j] = temp;
        return maxGold;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        
        // Test cases
        int[][] grid1 = {{0, 6, 0}, {5, 8, 7}, {0, 9, 0}};
        System.out.println(solution.getMaximumGold(grid1)); // Output: 24
        
        int[][] grid2 = {{1, 0, 7}, {2, 0, 6}, {3, 4, 5}, {0, 3, 0}, {9, 0, 20}};
        System.out.println(solution.getMaximumGold(grid2)); // Output: 28
    }
}
