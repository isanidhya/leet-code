import java.util.*;

public class Solution {
    public int maxNumEdgesToRemove(int n, int[][] edges) {
        // Union-Find Data Structure
        class UnionFind {
            int[] parent, rank;
            
            public UnionFind(int size) {
                parent = new int[size];
                rank = new int[size];
                for (int i = 0; i < size; i++) {
                    parent[i] = i;
                }
            }
            
            public int find(int x) {
                if (parent[x] != x) {
                    parent[x] = find(parent[x]);
                }
                return parent[x];
            }
            
            public boolean union(int x, int y) {
                int rootX = find(x);
                int rootY = find(y);
                
                if (rootX == rootY) {
                    return false;
                }
                
                if (rank[rootX] > rank[rootY]) {
                    parent[rootY] = rootX;
                } else if (rank[rootX] < rank[rootY]) {
                    parent[rootX] = rootY;
                } else {
                    parent[rootY] = rootX;
                    rank[rootX]++;
                }
                return true;
            }
        }
        
        // Union-Find instances for Alice and Bob
        UnionFind ufAlice = new UnionFind(n + 1);
        UnionFind ufBob = new UnionFind(n + 1);
        
        int edgesUsed = 0;
        
        // Step 1: Add all type 3 edges (shared by Alice and Bob)
        for (int[] edge : edges) {
            if (edge[0] == 3) {
                if (ufAlice.union(edge[1], edge[2])) {
                    ufBob.union(edge[1], edge[2]);
                    edgesUsed++;
                }
            }
        }
        
        // Step 2: Add all type 1 edges (only Alice)
        for (int[] edge : edges) {
            if (edge[0] == 1) {
                if (ufAlice.union(edge[1], edge[2])) {
                    edgesUsed++;
                }
            }
        }
        
        // Step 3: Add all type 2 edges (only Bob)
        for (int[] edge : edges) {
            if (edge[0] == 2) {
                if (ufBob.union(edge[1], edge[2])) {
                    edgesUsed++;
                }
            }
        }
        
        // Check if both Alice and Bob can traverse the entire graph
        int aliceRoot = ufAlice.find(1);
        int bobRoot = ufBob.find(1);
        
        for (int i = 2; i <= n; i++) {
            if (ufAlice.find(i) != aliceRoot || ufBob.find(i) != bobRoot) {
                return -1;
            }
        }
        
        return edges.length - edgesUsed;
    }

    public static void main(String[] args) {
        Solution sol = new Solution();
        int[][] edges1 = {{3, 1, 2}, {3, 2, 3}, {1, 1, 3}, {1, 2, 4}, {1, 1, 2}, {2, 3, 4}};
        System.out.println(sol.maxNumEdgesToRemove(4, edges1));  // Output: 2
        
        int[][] edges2 = {{3, 1, 2}, {3, 2, 3}, {1, 1, 4}, {2, 1, 4}};
        System.out.println(sol.maxNumEdgesToRemove(4, edges2));  // Output: 0
        
        int[][] edges3 = {{3, 2, 3}, {1, 1, 2}, {2, 3, 4}};
        System.out.println(sol.maxNumEdgesToRemove(4, edges3));  // Output: -1
    }
}
